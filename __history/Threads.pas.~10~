unit Threads;

interface

uses
	Windows, Classes, Math, Dialogs,SysUtils;

type
  Thread = class(TThread)
  private
		procedure AssignBitmap;
  protected
		procedure Execute; override;
	public
		var
			drawQuery: boolean;
			zoomOut : byte;
	end;
	
procedure run(zoomOut:byte);
var DataThread	:	Thread;
		threadAlive	:	boolean;
implementation

uses Unit1;

{ Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);

  and UpdateCaption could look like,

    procedure Thread.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; }

{ Thread }
procedure Thread.AssignBitmap;
begin
 //	form1.image1.Picture.Bitmap.Assign(bitmap);
end;

procedure Thread.Execute;
var i2,I,max		:	integer;
		buf					: AnsiString;
		frequency 	: TFrequency;
		scale				: extended;
		Tmp					: byte;
		_FileSize		: integer;
		blockCnt		: integer;
		optVar1			:	integer;
		ptr					: pointer;
begin
	while not terminated do begin
		sleep(UpdateInterval);
	if binary_data = '' then continue;
	if not drawQuery then continue;
	drawQuery := false;
	zoomOut:= trunc(Math.power(2,zoomOut));
	_FileSize := length(binary_data);
	//shift := trunc(panel2.Left/panel1.Width*_FileSize/256);
	blockCnt :=  _Filesize div 256;

	if blockcnt > 640*zoomOut then
		blockcnt := 640*zoomOut;
	if shift>(_Filesize div 256)-zoomOut*640 then
		shift := trunc((_Filesize div 256)-zoomOut*640);
	for I := 0 to 255 do
		for I2 := 0 to 639 do
			Exbitmap2[i][i2] := 0;
	if zoomOut*640*256 > _FileSize then
	begin
		Shift := 0;
	end;
	
	I:=shift;
	while I-shift < blockCnt - 1 do begin
		buf:='';
		if (i+1)*256 >= _FileSize then
			break;
		for I2 := 0 to 255 do
			buf := buf + binary_data[(i)*256 + i2];
		frequency := Frequency_Analysis(@binary_data,i*256,256);
		max := 0;
		for I2 := 0 to 255 do
			if max<frequency[i2] then
				max:=frequency[i2];
		if max <= 0 then begin
			showMessage('Error!');
			EXIT;
    end;
		scale:=1/max;
		optVar1 := trunc((I-shift)/zoomOut);
		for I2 := 0 to 255 do begin
			tmp := trunc(frequency[i2]*scale*$FF);
			if frequency[i2] = max then
				ExBitmap2[255-i2,optVar1] := tmp shl 16
			else
				ExBitmap2[255-i2,optVar1] := (tmp shl 16) + (tmp shl 8) + tmp;
			//bitmap.Canvas.Pixels[,255-i2] := (tmp shl 16) + (tmp shl 8) + tmp;
		end;
		inc(I, zoomOut);
	end;

	for I := 0 to 255 do begin
	 //	ptr := bitmap.ScanLine[i];
		Move(ExBitmap2[i],ptr^, 640*4);
	end;
 //	Synchronize(AssignBitmap);
	threadAlive := false;
	end;

end;

procedure run(zoomOut:byte);
begin

	form1.panel2.Width := trunc(trunc(Math.power(2,zoomOut))*256*640/length(binary_data)*form1.panel1.Width);
	threadAlive := true;

end;
end.
